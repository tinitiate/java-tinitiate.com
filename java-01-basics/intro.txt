// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: java basics and introduction
// >MetaDescription: 'java basics and introduction'
// >MetaKeywords: 'java basics introduction program, basics, structure example code, tutorials'
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: intro
// >---

// ># Java program structure
// >* Here we will see the structure of a very simple java program
// >* **Bare minimum required statements for a program to run.**
// >* Class Name
// >* Main Method
// >* Code in Main method

// >
// >![Java program structure](java-basics-program-structure.png "Java program structure")
// >

// >## What is a Package and why is it needed?
// >* A Java package is a mechanism for organizing Java classes
// >* Typically the "Java source file" or the ".java" files are placed in the
// >  directory whose name reflects the name of the package name.
// >* Since they act as DIRECTORIES of files, it allows the classes to download
// >  faster as a group rather than one at a time.
// >* Its common practice to typically use packages to organize java code
// >  belonging to the same category or providing similar functionality.


// >## What is a java Main Method
// >* Simply put Main method is the starting point of code execution in java.
// >* An application can have many ".java" files, BUT its important to know 
// >  where to start or the first program or piece of code that will execute.
// >* Lets assume there are 3 ".java" files in a project One of them would have
// >  a "main" method ,the main method is the method that's defined to be 
// >  called at the start of an application.
// >* Important features of the "main" method are;
// >* "main" method is PUBLIC:
// >  This is necessary because main() is called by the JVM before object creation.
// >* "main" method is STATIC:
// >   Since it is static it can be directly invoked via the class with out
// >   having to create an Object of the class.
// >* Main method as one input parameter of type string array
// >    * It can accept a array of string values
// >    * This array is the mechanism through which the runtime system passes 
// >      information to your application.
// >>

// >## Executing Java code
// >* For java code to be run, it involves a TWO step process
// >* **STEP 1.** Code compilation to generate CLASS file
// >* **STEP 2.** CLASS file execution

// >## Generate CLASS file or Code Compilation
// >* The Java code is written in a text file with extension **.java**
// >* Lets assume our java file name is **myCode.java**
// >* Use the **javac myCode.java** command at commandline, to generate the 
// >  CLASS file **myCode.class**.
// >```
javac myCode.java
// >```

// >* The above step will generate the **myCode.class** file.
// >* Using the **java** execute the **myCode.class**
// >* The **java** command is run at the command prompt.
// >```
java myCode
// >```
// >* **NOTE** when running the **java** command the **.class** 
// > file extension is not needed.
// >>
