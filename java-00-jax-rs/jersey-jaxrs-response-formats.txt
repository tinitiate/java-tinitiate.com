// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: Java Jersey JAX RS response formats example
// >MetaDescription: Java Jersey JAX RS response formats sample project
// >MetaKeywords: Java Jersey,JAX RS,RESTful,response formats, JSON, XML, HTML and Plain Text sample project example code, tutorials
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: jersey-jaxrs-response-formats
// >---

// ># Jersey JAX RS Response formats
// >* Java Jersey JAX RS send Response in various formats
// >* Format type Plain Text, This is a simple string
// >* Format type XML,
// >* Format type JSON
// >* Format type HTML, This can have all HTML elements.

// >## Tutorial Code to send response in various output formats
// >* Step 1.
// >* Create **web.xml** file
// >* In the **WEB-INF** folder add the following to a file named **web.xml**
// >```
<?xml version="1.0" encoding="UTF-8"?>
<!--
web.xml
=======
1. Servlet is a Java program that extends a web servers capability as they
   directly talk to Java APIs, They are ideal for Java Web Development.
2. The web.xml file is the deployment descriptor for a Servlet-based Java web 
   application.
3. The web.xml handles two important roles,
  3.1 Define a name of the handler (Servlet)
  3.2 The handler maps a Java File to a HTML file.
4. There are more advanced features of web.xml, which have config data, accepts
   HTML page name patterns.
-->
<web-app xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
         xmlns = "http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee
                               http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id = "WebApp_ID"
         version = "3.0">
   <display-name>Tinitiate</display-name>
   <!-- 
   1. Create multiple servlets and servlet mappings.
   2. The "<servlet>" and "<servlet-mapping>" elements have a common element
      "<servlet-name>" value.
   3. The common
   -->
   <servlet>
   <!-- MAKE SURE servlet-name is same for "servlet" and "servlet-name" elements -->
      <servlet-name>Jersey RESTful Introduction</servlet-name>
      <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
      <init-param>
         <param-name>jersey.config.server.provider.packages</param-name>
         <param-value>com.tinitiate.jersey.rs</param-value>
      </init-param>
   </servlet>
   <servlet-mapping>
   <!-- MAKE SURE servlet-name is same for "servlet" and "servlet-name" elements -->
      <servlet-name>Jersey RESTful Introduction</servlet-name>
      <!--
      1. The pattern "my-site/<project-name>/rest/*" will be handled by the
         package specified in the <init-param>'s <param-value> element.
      2. The Class that handles in the URL pattern depends on the @Path 
         Annotation specified for the class.
      -->
      <url-pattern>/rest/*</url-pattern>
   </servlet-mapping>
</web-app>
// >```

// >* Step 2.
// >* Create java code file in "project-Folder" > "Java Resources" > "src"
// >```
package com.tinitiate.jersey.rs;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;


@Path("/response")
public class JAXRSResponseFormats {

    // Generate Plain Text response using TEXT_PLAIN
    @GET
    @Path("/text")
    @Produces(MediaType.TEXT_PLAIN)
    public Response responsePlainText() {
 
        String result = "Tinitiate Jersey RS Plain Text Response.";
        return Response.status(200).entity(result).build();
    }

    // Generate XML response using TEXT_XML
    @GET
    @Path("/xml")
    @Produces(MediaType.TEXT_XML)
    public Response responseXML() {
        String result = "<?xml version=\"1.0\"?>" + "<message> Tinitiate Jersey RS XML Response" + "</message>";
        return Response.status(200).entity(result).build();
    }

    // Generate JSON response using APPLICATION_JSON
    @GET
    @Path("/json")
    @Produces(MediaType.APPLICATION_JSON)
    public Response responseJSON() {
        String result = "{\"Tinitiate Jersey RS JSON Response\"}";
        return Response.status(200).entity(result).build();
    }

    // Generate HTML response using TEXT_HTML
    @GET
    @Path("/html")
    @Produces(MediaType.TEXT_HTML)
    public Response responseHTML() {
        String result = "<html> " + "<title>" + "Tinitiate" + "</title>"
                        + "<body><h1>" + "Tinitiate Jersey RS HTML Response" + "</body></h1>" + "</html> ";
        return Response.status(200).entity(result).build();
    }

}
// >```

// >### Checking the results in browser
// >* Copy all Libraries to the "WEB-INF > lib" folder of the project, from
// >* "jax-ri/api","jax-ri/ext" and "jax-ri/lib" folders
// >* Step 3. `Run the project`
// >* Step 4. `Open Browser` and type 
// >  * "http://localhost:8080/TinitiateJerseyRS/rest/response/text"
// >  * **OUTPUT:** Tinitiate Jersey RS Plain Text Response.
// >  * "http://localhost:8080/TinitiateJerseyRS/rest/response/xml"
// >  * **OUTPUT:** <message class=" cd-browser-extension">Tinitiate Jersey RS XML Response</message>
// >  * "http://localhost:8080/TinitiateJerseyRS/rest/response/json"
// >  * **OUTPUT:** {"Tinitiate Jersey RS JSON Response"}
// >  * "http://localhost:8080/TinitiateJerseyRS/rest/response/html"
// >  * **OUTPUT:** Tinitiate Jersey RS HTML Response
// >>
