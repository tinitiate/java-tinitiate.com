// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: Java Web Services jersey jax rs xml put http method
// >MetaDescription: Java JAX RS PUT HTTP Method from XML file example for Web Services
// >MetaKeywords: Java, JAX RS, PUT, HTTP Method, from XML file, HTTP PUT example for Web Services, tutorials
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: jersey-jaxrs-xml-put-http-method
// >---

// >## PUT HTTP METHOD
// >* PUT is a HTTP method which is used to create / update data or resource
// >  on the server.
// >* It is implemented using the `@PUT` annotation from `import javax.ws.rs.PUT`
// >* PUT is Used to create a resource, and Updates are at a low level are
// >  resource overwrites.
// >* PUT and POST are very similar, The main difference between them is;
// >* PUT always replaces the resource in the server, If another PUT is issued
// >  to the same URL then there is no change, Sending the same request more
// >  than once has no effect, This concept is called idempotent.
// >* PUTS are idempotent.
// >* Applicable Return HTTP Codes
// >  * 200 (OK)
// >  * 204 (No Content)
// >  * 404 (Not Found)
// >  * 405 (Method Not Allowed)
// >>


// >## CHANGE XML FILE WITH JAVA JAX RS PUT HTTP METHOD EXAMPLE STEPS

// >### STEP 1. The XML Resource
// >* For this demo, A common XML file with the following contents is saved
// >  in the following path "c:\personal\tidata.xml"
// >* Using the file name `tidata.xml` save the following:
// >```
<tiData>
  <website>tinitiate.com</website>
  <courses id="1">
    <type>scripting</type>
    <name>Python</name>
  </courses>
  <courses id="2">
    <type>scripting</type>
    <name>Ruby</name>
  </courses>
  <courses id="3">
    <type>database</type>
    <name>Oracle</name>
  </courses>
  <courses id="4">
    <type>database</type>
    <name>MySQL</name>
  </courses>
  <social id="1">facebook</social>
  <social id="2">twitter</social>
</tiData>
// >```
// >>


// >### STEP 2. Add XML Resource File path to the web.xml
// >* The web.xml provides mechanism to add parameters, here we use the param 
// >  name `XMLResource`
// >* To the `web.xml` of the project add the following:
// >```
  <context-param>
    <param-name>XMLResource</param-name>
    <param-value>C:/Personal/tidata.xml</param-value>
  </context-param>
// >```
// * Reference Image:
// > ![Java Jersey JAX RS web.xml config parameters](jersey-jaxrs-get-xml-webxml.png "Java Jersey JAX RS web.xml config parameters")
// * web.xml would look like this
// >```
<?xml version="1.0" encoding="UTF-8"?>
<!--
web.xml
=======
1. Servlet is a Java program that extends a web servers capability as they
   directly talk to Java APIs, They are ideal for Java Web Development.
2. The web.xml file is the deployment descriptor for a Servlet-based Java web 
   application.
3. The web.xml handles two important roles,
  3.1 Define a name of the handler (Servlet)
  3.2 The handler maps a Java File to a HTML file.
4. There are more advanced features of web.xml, which have config data, accepts
   HTML page name patterns.
-->
<web-app 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  id="WebApp_ID" version="3.0">
  <display-name>Tinitiate</display-name>
  <context-param>
    <param-name>JSONResource</param-name>
    <param-value>C:/Personal/tidata.json</param-value>
  </context-param>
  <context-param>
    <param-name>XMLResource</param-name>
    <param-value>C:/Personal/tidata.xml</param-value>
  </context-param>
  <servlet>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>com.tinitiate.jersey.rs</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>
</web-app>
// >```


// >## STEP 4. The Java code to use HTTP PUT to Update Data (resource) in an XML file
// >```
package com.tinitiate.jersey.rs;

import javax.servlet.ServletContext;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.*;


// NOTES:
// 1. The PATH(URL) to invoke this class, MAKE SURE to append the /rest/ from
//    the **web.xml**
// 2. The "extends Application" enables JAX RS to read the web.xml parameters
@Path("/http_put_xml")
public class JaxRSHTTPPutXML {

    // variable to store path of JSON File
    String TmpFilePath = "";

    // Create XML object
    TiData XMLData = new TiData();

    // CONSTRUCTOR
    // 1. Get resource XML file Path from web.xml,
    //    Located in the PROJECt-NAME > WebContent > WEB-INF > web.xml
    // 2. Get the XML data from the "JAXBContext" and "Unmarshaller"
    //    into the "XMLData" Object.
    public JaxRSHTTPPutXML(@Context ServletContext context) throws JAXBException {

        // Step 1.
        // Read the XML file path from web.xml, Where the 
        TmpFilePath = context.getInitParameter("XMLResource");

        // Step 2.
        // Read XML data into Object "XMLData"
        try {
            // Read the XML file into the file object
            File file = new File(TmpFilePath);
            JAXBContext jaxbObj = JAXBContext.newInstance(TiData.class);
            Unmarshaller jaxbUnmarshaller  = jaxbObj.createUnmarshaller();

            //  Create an Elements
            XMLData = (TiData) jaxbUnmarshaller.unmarshal(file);

        } catch (JAXBException e) { e.printStackTrace(); }
    }


    // UpdateXMLData METHOD
    // 1. This method updates elements of the tidata.xml file
    // 2. Use with CuRL or PostMan with the @POST method, Cannot run @POST in browser.
    // 3. The URL path expects the ElementName, ID and the ElementValue 
    // 4. For ELEMENTS where there is NO ID, any ID value will work, But an 
    //    ID value is required.
    // 5. UPDATE "WEBSITE" ELEMENT,
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/website/<any-value-doesnt-matter>/<new-value>
    //    UPDATE "COURSES > TYPE" ELEMENT,
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/type/<id number>/<new-value>
    //    UPDATE "COURSES > NAME," ELEMENT,
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/name/<id number>/<new-value>
    //    UPDATE "SOCIAL" ELEMENT,
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/social/<id number>/<new-value>
    @PUT
    @Path("/update_element_by_id/{ElementName}/{ID}/{ElementValue}")
    public Response UpdateXMLData( @PathParam("ElementName") String ElementName
                                  ,@PathParam("ID") String ID
                                  ,@PathParam("ElementValue") String ElementValue) {

        // STEP 1.
        // 1. There are FOUR ELEMENTS in the tiData.xml courses, type, name,
        //    website, social
        // 2. Update the XML element by the attribute ID element
        // 3. Website Element doesnt have an ID attribute, so any values passed
        //    in the POST URL for the ID value will be ignored, It is needed 
        //    to pass a dummy value as the URL for this function expects it.
        if (ElementName.equalsIgnoreCase("website")) {

            XMLData.setWebsite(ElementValue);
        }
        else if (ElementName.equalsIgnoreCase("type")) {

            // Create Empty Courses Object
            List<Courses> crs = new ArrayList<Courses>();
            for (Courses c : XMLData.getCourses()) {
                if (c.getId().equalsIgnoreCase(ID)) {
                    // Update "Courses" with Given New Social Value
                    c.setType(ElementValue);
                }
                crs.add(c);
            }
            // Add updated Course Object "c" to XMLData
            XMLData.setCourses(crs);
        }
        else if (ElementName.equalsIgnoreCase("name")) {
            // Create Empty Courses Object
            List<Courses> crs = new ArrayList<Courses>();
            for (Courses c : XMLData.getCourses()) {
                if (c.getId().equalsIgnoreCase(ID)) {
                    // Update "Courses" with Given New Social Value
                    c.setType(ElementValue);
                }
                crs.add(c);
            }
            // Add updated Course Object "c" to XMLData
            XMLData.setCourses(crs);
        }
        else if (ElementName.equalsIgnoreCase("social")) {
            // Create Empty Social Object
            List<Social> soc = new ArrayList<Social>();
            for (Social s: XMLData.getSocial()) {
                if (s.getId().equalsIgnoreCase(ID)) {
                    // Update "Social" with Given New Social Value
                    s.setSocial(ElementValue);
                }
                soc.add(s);
            }
            // Add updated Social Object "c" to XMLData
            XMLData.setSocial(soc);
        }


        // STEP 2.
        // Write the Updated "TiData" XML object back to the tidata.xml file
        try {
            // Create JAXBContext Object for the TiData Class 
            JAXBContext jaxbObj = JAXBContext.newInstance(TiData.class);
            Marshaller marshallerObj = jaxbObj.createMarshaller();  
            marshallerObj.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            // Write back to the tidata.xml to the PATH TmpFilePath
            marshallerObj.marshal( XMLData,new FileOutputStream(TmpFilePath));
        } catch (Exception e) { e.printStackTrace(); }

        // Return the result
        return Response.status(200).entity("tidata.xml file updated to path " + TmpFilePath).build();
    }
}
// >```


// >## STEP 5. Updating the XML file using PUT HTTP Method
// >* This program updates XML file Elements by using ID, Element name and Value.
// >* The testing of the **PUT** Cannot be done using a broswer, Instead use a Tool like **POSTMAN**,
// >* Run the program and check in Browser using the URLs:
// >* UPDATE "WEBSITE" ELEMENT,
// >* http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/website/<any-value-doesnt-matter>/<new-value>
// >* UPDATE "COURSES > TYPE" ELEMENT,
// >* http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/type/<id number>/<new-value>
// >* UPDATE "COURSES > NAME," ELEMENT,
// >* http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/name/<id number>/<new-value>
// >* UPDATE "SOCIAL" ELEMENT,
// >* http://localhost:8080/TinitiateJerseyRS/rest/http_put_xml/update_element_by_id/social/<id number>/<new-value>
// > ![Java Jersey JAX Put HTTP Method](jersey-jaxrs-put-xml-postman-test.png "Java Jersey JAX Put HTTP Method")
// >>
