// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: Java Jersey JAX RS RESTful Web Services File Upload
// >MetaDescription: Java Jersey JAX RS RESTful Web Services File Upload
// >MetaKeywords: Java Jersey JAX RS RESTful Web Services, File Upload, example code, tutorials
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: jersey-jaxrs-file-upload
// >---

// ># Java Jersey Jaxrs File Upload
// >* Java Jersey Jaxrs provides mechanisms to Upload files to server, this 
// >  could be an essential requirement in a web application.
// >* 

// >## Example for creating a JAVA JAX RS HTML form to upload data using POST
// >* The upload file location must be specified in the Java Code file,
// >* **Prerequisite Libraries**
// >* Make sure the following JARS are installed as part of the project
// >* `jersey media multipart jar`
// >* `mimepull jar`
// >* `web.xml` must have the clause `<load-on-startup>1</load-on-startup>`
// >* Folder Structure for Download, Below mentioned example
// > ![Java Jersey JAX RS upload Folder Structure](jersey-jaxrs-file-upload-folder-structure.png "Java Jersey JAX RS File upload Folder Structure")


// >### STEP 1. Java Code file for Handling the Download
// >* The Java Code file has the URL PATH at which the java code is invoked,
// >  it useds the @POST method to enable a file download from the server 
// >  location. The `@Path` handles the routing for this file to be invoked 
// >  when issued in a browser.
// >* **FILE NAME** `JaxRSFileUpload.java`
// >```
package com.tinitiate.jersey.rs;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.glassfish.jersey.media.multipart.FormDataContentDisposition;  
import org.glassfish.jersey.media.multipart.FormDataParam;  

@Path("/")
public class JaxRSFileUpload {

    @POST
    @Path("/upload")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    public Response uploadFile( @FormDataParam("UploadFile") InputStream UploadFileInputStream
                               ,@FormDataParam("UploadFile") FormDataContentDisposition UploadFileInfo) {

        String ServerUploadsFolder = "c://personal//uploads//" + UploadFileInfo.getFileName();

        // save it
        try {
            FileOutputStream out = new FileOutputStream(new File(ServerUploadsFolder));
            byte[] bytes = new byte[1024];
            int bytesRead = 0;

            out = new FileOutputStream(new File(ServerUploadsFolder));

            while ((bytesRead = UploadFileInputStream.read(bytes)) != -1) {
                out.write(bytes, 0, bytesRead);
            }

            out.flush();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        String output = "File uploaded to serverpath: " + ServerUploadsFolder;

        return Response.status(200).entity(output).build();
    }
}
// >```


// >### STEP 2. The HTML File to provide upload Links
// >* This is the HTML file that is called from the URL
// > http://localhost:8080/TinitiateJerseyRS/uploads.html
// >* **FILE NAME** `uploads.html`
// >```
<html>
<body>
    <h1>Tinitiate.com Java jersey Jax RS File Upload</h1>
    <form action="rest/upload" method="post" enctype="multipart/form-data">
	    <p>
	     Select file to Upload - <input type="file" name="UploadFile"/>
	    </p>
	    <input type="submit" value="UpLoad File" />
    </form>
</body>
</html>
// >```


// >### STEP 3. The web.xml file
// >* The Web.xml file that is used for this example
// > ![Java Jersey JAX RS upload web.xml](jersey-jaxrs-file-upload-web-xml.png "Java Jersey JAX RS File upload web.xml")
// >* **FILE NAME** `web.xml`
// >```
<?xml version="1.0" encoding="UTF-8"?>
<!--
web.xml
=======
1. Servlet is a Java program that extends a web servers capability as they
   directly talk to Java APIs, They are ideal for Java Web Development.
2. The web.xml file is the deployment descriptor for a Servlet-based Java web 
   application.
3. The web.xml handles two important roles,
  3.1 Define a name of the handler (Servlet)
  3.2 The handler maps a Java File to a HTML file.
4. There are more advanced features of web.xml, which have config data, accepts
   HTML page name patterns.
-->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee" 
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
         id="WebApp_ID"
         version="3.0">
  <display-name>Tinitiate</display-name>
  <context-param>
    <param-name>JSONResource</param-name>
    <param-value>C:/Personal/tidata.json</param-value>
  </context-param>
  <context-param>
    <param-name>XMLResource</param-name>
    <param-value>C:/Personal/tidata.xml</param-value>
  </context-param>
  <servlet>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>com.tinitiate.jersey.rs</param-value>
    </init-param>
	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>
</web-app>
// >```


// >### STEP 4. Executing and Using the Program
// >* Assuming a server is configured , run the program in an IDE like eclipse
// >* Once the program is running open a browser and use the URL;
// >* `http://localhost:8080/TinitiateJerseyRS/uploads.html`
// >* This is what should be displayed in the browser:
// > ![Java Jersey JAX RS File upload HTML FORM](jersey-jaxrs-file-upload-form-html.png "Java Jersey JAX RS File Upload HTML FORM")
// >* Select a file and click upload.
