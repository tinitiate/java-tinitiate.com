// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: Java Web Services
// >MetaDescription: Java JAX RS POST HTTP Method from JSON file example for Web Services
// >MetaKeywords: Java, JAX RS, POST, HTTP Method, from JSON file, HTTP POST example for Web Services, tutorials
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: jersey-jaxrs-xml-post-http-method
// >---

// >## POST HTTP METHOD
// >* POST is a HTTP method which is used to Add / Update / Change data
// >  or resource on the server.
// >* It is implemented using the `@POST` annotation from `import javax.ws.rs.POST`
// >* POST requests are never cached and are not retained in the browser history.
// >* POST requests cannot be bookmarked and have no data length restrictions.
// >* Applicable Return HTTP Codes
// >  * 201 (Created)
// >  * 404 (Not Found)
// >  * 409 (Conflict) resource already exists!
// >>


// >## ADD ELEMENTS TO XML FILE WITH JAVA JAX RS POST HTTP METHOD

// >### STEP 1. The XML Resource
// >* For this demo, A common XML file with the following contents is saved
// >  in the following path "c:\personal\tidata.xml"
// >* Using the file name `tixml.json` save the following:
// >```
<tiData>
  <website>tinitiate.com</website>
  <courses id="1">
    <type>scripting</type>
    <name>Python</name>
  </courses>
  <courses id="2">
    <type>scripting</type>
    <name>Ruby</name>
  </courses>
  <courses id="3">
    <type>database</type>
    <name>Oracle</name>
  </courses>
  <courses id="4">
    <type>database</type>
    <name>MySQL</name>
  </courses>
  <social id="1">facebook</social>
  <social id="2">twitter</social>
</tiData>
// >```
// >>


// >### STEP 2. Add XML Resource File path to the web.xml
// >* The web.xml provides mechanism to add parameters, here we use the param 
// >  name `XMLResource`
// >* To the `web.xml` of the project add the following:
// >```
  <context-param>
    <param-name>XMLResource</param-name>
    <param-value>C:/Personal/tidata.xml</param-value>
  </context-param>
// >```
// * Reference Image:
// > ![Java Jersey JAX RS web.xml config parameters](jersey-jaxrs-get-xml-webxml.png "Java Jersey JAX RS web.xml config parameters")
// * web.xml would look like this
// >```
<?xml version="1.0" encoding="UTF-8"?>
<!--
web.xml
=======
1. Servlet is a Java program that extends a web servers capability as they
   directly talk to Java APIs, They are ideal for Java Web Development.
2. The web.xml file is the deployment descriptor for a Servlet-based Java web 
   application.
3. The web.xml handles two important roles,
  3.1 Define a name of the handler (Servlet)
  3.2 The handler maps a Java File to a HTML file.
4. There are more advanced features of web.xml, which have config data, accepts
   HTML page name patterns.
-->
<web-app 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  id="WebApp_ID" version="3.0">
  <display-name>Tinitiate</display-name>
  <context-param>
    <param-name>JSONResource</param-name>
    <param-value>C:/Personal/tidata.json</param-value>
  </context-param>
  <context-param>
    <param-name>XMLResource</param-name>
    <param-value>C:/Personal/tidata.xml</param-value>
  </context-param>
  <servlet>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>com.tinitiate.jersey.rs</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>Jersey RESTful Introduction</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>
</web-app>
// >```


// >## STEP 4. The Java code to use HTTP POST to add data (resource) from XML file
// >```
package com.tinitiate.jersey.rs;

import javax.servlet.ServletContext;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import javax.xml.bind.*;


// NOTES:
// 1. The PATH(URL) to invoke this class, MAKE SURE to append the /rest/ from
//    the **web.xml**
// 2. The "extends Application" enables JAX RS to read the web.xml parameters
@Path("/http_post_xml")
public class JaxRSHTTPPostXML {

    // variable to store path of JSON File
    String TmpFilePath = "";

    // Create XML object
    TiData XMLData = new TiData();

    // CONSTRUCTOR
    // 1. Get resource XML file Path from web.xml,
    //    Located in the PROJECt-NAME > WebContent > WEB-INF > web.xml
    // 2. Get the XML data from the "JAXBContext" and "Unmarshaller"
    //    into the "XMLData" Object.
    public JaxRSHTTPPostXML(@Context ServletContext context) throws JAXBException {

        // Step 1.
        // Read the XML file path from web.xml, Where the 
        TmpFilePath = context.getInitParameter("XMLResource");


        // Step 2.
        // Read XML data into Object "XMLData"
        try {
            // Read the XML file into the file object
            File file = new File(TmpFilePath);
            JAXBContext jaxbObj = JAXBContext.newInstance(TiData.class);
            Unmarshaller jaxbUnmarshaller  = jaxbObj.createUnmarshaller();

            //  Create an Elements
            XMLData = (TiData) jaxbUnmarshaller.unmarshal(file);

        } catch (JAXBException e) { e.printStackTrace(); }
    }


    // AddCourseXMLData METHOD
    // 1. This method ADDs new values to the Course Element of the tidata.xml file
    // 2. The SubElements in the Course Element are CourseID, CoruseType, CourseName
    // 3. Sample URL to Add a new XML element
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_course_element/<course id>/<course-type>/<course-name>
    @POST
    @Path("/add_course_element/{CourseID}/{CourseType}/{CourseName}")
    public Response AddCourseXMLData( @PathParam("CourseID") String CourseID
                                     ,@PathParam("CourseType") String CourseType
                                     ,@PathParam("CourseName") String CourseName) {

        // STEP 1.
        // Create a Courses Object
        Courses cNew = new Courses();
        // Add the URL Parameters to the
        cNew.setId(CourseID);
        cNew.setType(CourseType);
        cNew.setName(CourseName);

        // STEP 2.
        // Get Existing Courses from XML
        List<Courses> courses = XMLData.getCourses();

        // STEP 3.
        courses.add(cNew);
        
        
        // STEP 4.
        // Add to the Courses Object to Courses Array
        XMLData.setCourses(courses);

        // STEP 5.
        // Write to XML File
        try {
            // Create JAXBContext Object for the TiData Class 
            JAXBContext jaxbObj = JAXBContext.newInstance(TiData.class);
            Marshaller marshallerObj = jaxbObj.createMarshaller();  
            marshallerObj.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            // Write back to the tidata.xml to the PATH TmpFilePath
            marshallerObj.marshal( XMLData,new FileOutputStream(TmpFilePath));
        } catch (Exception e) { e.printStackTrace(); }


        // Return the result
        return Response.status(200).entity("New Course Values Added" + " to path " + TmpFilePath).build();
    }

    

    // AddSocialXMLData METHOD
    // 1. This method ADDs new values to the Social Element of the tidata.xml file
    // 2. Sample URL to Add a new XML element
    //    http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_social_element/<social id>/<social-value>
    @POST
    @Path("/add_social_element/{SocialID}/{SocialValue}")
    public Response AddSocialXMLData( @PathParam("SocialID") String SocialID
                                     ,@PathParam("SocialValue") String SocialValue) {

        // STEP 1.
        // Create Social Object and store input values from the URL
        Social sNew =  new Social();
        sNew.setId(SocialID);
        sNew.setSocial(SocialValue);

        // STEP 2.
        // Get Existing Courses from XML
        List<Social> social = XMLData.getSocial();

        // STEP 3.
        // Add the New Social Data
        social.add(sNew);

        // STEP 4.
        // Add to the Social Object to Social List
        XMLData.setSocial(social);

        // STEP 5.
        // Write to XML File
        try {
            // Create JAXBContext Object for the TiData Class 
            JAXBContext jaxbObj = JAXBContext.newInstance(TiData.class);
            Marshaller marshallerObj = jaxbObj.createMarshaller();  
            marshallerObj.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            // Write back to the tidata.xml to the PATH TmpFilePath
            marshallerObj.marshal( XMLData,new FileOutputStream(TmpFilePath));
        } catch (Exception e) { e.printStackTrace(); }

        // Return the result
        return Response.status(200).entity("New Social Values Added" + " to path " + TmpFilePath).build();
    }
}
// >```


// >## STEP 5. Reading the XML file using POST HTTP Method
// >* This program adds XML file Elements by the Courses or Social Elements
// >* The testing of the **POST** Cannot be done using a broswer, Instead use a Tool like **POSTMAN**,
// >* Here we use the below URLs to remove specific XML elements
// >  * Using the **POST HTTP METHOD** this example adds ELEMENTS of XML data.
// >  * **DELETE COURSE ELEMENT BY ID OF THE TIDATA.XML FILE**
// >  * **GET FULL DATA**
// >  * http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_course_element/<course id>/<course-type>/<course-name>
// >  * http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_social_element/<social id>/<social-value>
// >  * **SAMPLE USAGE**
// >  * http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_course_element/5/webdevelopment/jquery
// >  * http://localhost:8080/TinitiateJerseyRS/rest/http_post_xml/add_social_element/3/linkedIn
// >* The above statements will add Elements and Data to the tidata.xml file. 
// > ![Java Jersey JAX Post HTTP Method](jersey-jaxrs-post-xml-postman-test.png "Java Jersey JAX POST HTTP Method")
// >>
