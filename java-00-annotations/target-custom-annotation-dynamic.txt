// >---
// >YamlDesc: CONTENT-ARTICLE
// >Title: Java Target Annotations
// >MetaDescription: java target annotations annotation_type constructor field local_variable method package parameter type
// >MetaKeywords: java target annotations,annotation_type,constructor,field,local_variable,method,package,parameter annotation example code, tutorials
// >Author: Venkata Bhattaram / tinitiate.com
// >ContentName: target-custom-annotation-dynamic
// >---

// ># Target Annotation
// >* Target Type annotations provides enhanced analysis of Java programs with type checking.
// >* Target Type annotations can be applied to many elements of a Java Class
// >* **ANNOTATION_TYPE** Annotation type declaration
// >* **CONSTRUCTOR** Constructor declaration
// >* **FIELD** Field declaration (includes enum constants)
// >* **LOCAL_VARIABLE** Local variable declaration
// >* **METHOD** Method declaration
// >* **PACKAGE** Package declaration
// >* **PARAMETER** Parameter declaration
// >* **TYPE** Class, interface (including annotation type), enum

// >## Demonstration of Target Annotation
// >* Here we create annotations for 
// >  * **TYPE(CLASS)**
// >  * Applies for Class, Interface, Enumeration and Annotation
// >  * Using the construct @Target(ElementType.TYPE)
// >  * **FIELD**
// >  * Applies for Fields
// >  * Using the construct @Target(ElementType.FIELD)
// >  * **METHOD**
// >  * Applies for methods
// >  * Using the construct @Target(ElementType.METHOD)
// >  * **PARAMETER**
// >  * Applies for method parameters
// >  * Using the construct @Target(ElementType.PARAMETER)
// >  * **CONSTRUCTOR**
// >  * Applies for constructors
// >  * Using the construct @Target(ElementType.CONSTRUCTOR)
// >  * **LOCAL_VARIABLE**
// >  * Applies for local variables
// >  * Using the construct @Target(ElementType.LOCAL_VARIABLE)

// >### Create Target Annotations and Class using the Target Annotations
// >* Define the Retention as RunTime so that they can be accessed by the JVM 
// >  at Runtime.
// >```
package tinitiate.java.annotations;

// Imports to Create the Target Annotation
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

// TARGET ANNOTATIONS
// Create range of Target Annotations
// ==================================

// TYPE
// Applies for Class, Interface, Enumeration and Annotation
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@interface TargetType { String data(); }

// FIELD
// Applies for Fields
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface TargetField { String data(); }

// METHOD
// Applies for methods
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface TargetMethod { String data(); }pls re

// PARAMETER
// Applies for method parameters
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.PARAMETER)
@interface TargetParameter { String data(); }

// CONSTRUCTOR
// Applies for constructors
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.CONSTRUCTOR)
@interface TargetConstructor { String data(); }

// LOCAL_VARIABLE
// Applies for local variables
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.LOCAL_VARIABLE)
@interface TargetLocalVariable { String data(); }


// START USING ANNOTATIONS
// =======================

//# Class Annotation
@TargetType(data = "Target Type; class annotation")
public class TargetAnnotation {

    //#  Class Field Annotation
    @TargetField(data = "Target Class field annotation")
    String MyField;

    //# Class Method Annotation
    @TargetMethod(data = "Target method annotation")
    public void MyMethod(@TargetParameter(data="Target Method Parameter annotation") int A) {

        //# Method Local Variable
        @TargetLocalVariable(data="Target Local variable") String Localvar;
    }

    //# Class Constructor Annotation
    @TargetConstructor(data ="Target Constructor annotation")
    public TargetAnnotation() {
        
    }
}
// >```

// >### Dynamically Read the Annotation Types, Annotation Names and Annotation Parameter Values
// >* Read Annotation Names annotation attributes and annotation attribute values,
// >  When the Annotation name is not provided.
// >* `Method Local variables CANNOT BE READ using reflection`, as Local
// >   variables are invoked only at runtime.
// >* To Dynamically read variable Annotation, we must use a CLASS DECOMPILER
// >* Below program doesnot demonstrate reading Local variable
// >```
package tinitiate.java.annotations;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Field;
import java.lang.reflect.Constructor;

public class DynamicReadTargetAnnotation {

    // READ THE ANNOTATIONS USING REFLECTION WHEN NO ANNOTATION NAME IS PROVIDED
    public static void main(String[] args) {

        // STEP 1.
        // READ Class Level Annotation without the annotation name
        // =======================================================

        System.out.println("CLASS NAME: " + TargetAnnotation.class.getName());
        // Get ClassName at Runtime, Loop through the Class level annotation
        for (Annotation annoObj : TargetAnnotation.class.getAnnotations()) {
            
            // Create a Generic of Annotation Class type
            Class<? extends Annotation> type = annoObj.annotationType();
            
            // Print the Annotation Type
            System.out.println("ANNOTATION NAME: " + type.getName());

            // Loop through the Annotation to get the Annotation 
            // Attributes and its values, Every Annotation Attribute is 
            // treated like a method
            for (Method method : type.getDeclaredMethods()) {
                Object value = null;
                try { // Get Annotation 
                    value = method.invoke(annoObj, (Object[])null);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                System.out.println("ANNOTATION ATTRIBUTE NAME:VALUE " + method.getName() + ":" + value);
            }
        }

        
        // STEP 2.
        // READ Class Field Level Annotation without the annotation name
        // =============================================================
        
        // Get all fields of the Class
        Field[] clsFields = TargetAnnotation.class.getDeclaredFields();

        // For every Field Check if there is an annotation
        for (Field f : clsFields) {
            
            System.out.println("CLASS FIELD NAME: " + f.getName());
            
            // Create a Generic of Annotation Class type
            for (Annotation annFlds : f.getAnnotations()) {

                // Create a Generic of Annotation Class type
                Class<? extends Annotation> type = annFlds.annotationType();
                
                // Print the Annotation Type
                System.out.println("ANNOTATION NAME: " + type.getName());

                // Loop through the Annotation to get the Annotation 
                // Attributes and its values, Every Annotation Attribute is 
                // treated like a method
                for (Method method : type.getDeclaredMethods()) {
                    
                    Object value = null;
                    
                    try { // Get Annotation 
                        value = method.invoke(annFlds, (Object[])null);
                    } catch (Exception e) { e.printStackTrace(); }

                    System.out.println("ANNOTATION ATTRIBUTE NAME:VALUE " + method.getName() + ":" + value);
                }
            }
        }

        
        // STEP 3.
        // READ Class Method Level Annotation without the annotation name
        // ==============================================================
        
        // Get all the Methods of the Class
        Method[] clsMethods = TargetAnnotation.class.getDeclaredMethods();
        
        // For every Method Check if there is an annotation
        for (Method m : clsMethods) {
            System.out.println("CLASS METHOD NAME: " + m.getName());
            
            // Create a Generic of Annotation Class type
            for (Annotation annMtds : m.getAnnotations()) {

                // Create a Generic of Annotation Class type
                Class<? extends Annotation> type = annMtds.annotationType();
                
                // Print the Annotation Type
                System.out.println("ANNOTATION NAME: " + type.getName());

                // Loop through the Annotation to get the Annotation 
                // Attributes and its values, Every Annotation Attribute is 
                // treated like a method
                for (Method method : type.getDeclaredMethods()) {
                    
                    Object value = null;
                    
                    try { // Get Annotation 
                        value = method.invoke(annMtds, (Object[])null);
                    } catch (Exception e) { e.printStackTrace(); }

                    System.out.println("ANNOTATION ATTRIBUTE NAME:VALUE " + method.getName() + ":" + value);
                }
            }
        }

        
        // STEP 4.
        // READ Class Method Parameter  Level Annotation without
        // the annotation name
        // =============================================================
        Method[] clsMetds = TargetAnnotation.class.getDeclaredMethods();
        // For every Method Check if there is an annotation
        for (Method m : clsMetds) {
            System.out.println("CLASS METHOD NAME: " + m.getName());
            for (Parameter p : m.getParameters()) {

                // NOTE In Java parameter names are not available via reflection 
                // Only argument by position is displayed via getName()
                System.out.println("CLASS METHOD " + m.getName() + " PARAMETER NAME: " + p.getName());
                
                // Create a Generic of Annotation Class type
                for (Annotation annMtPrm : p.getAnnotations()) {

                    // Create a Generic of Annotation Class type
                    Class<? extends Annotation> type = annMtPrm.annotationType();
                    
                    // Print the Annotation Type
                    System.out.println("ANNOTATION NAME: " + type.getName());

                    // Loop through the Annotation to get the Annotation 
                    // Attributes and its values, Every Annotation Attribute is 
                    // treated like a method
                    for (Method method : type.getDeclaredMethods()) {
                        
                        Object value = null;
                        
                        try { // Get Annotation 
                            value = method.invoke(annMtPrm, (Object[])null);
                        } catch (Exception e) { e.printStackTrace(); }

                        System.out.println("ANNOTATION ATTRIBUTE NAME:VALUE " + method.getName() + ":" + value);
                    }
                }
            }
        }    


        // STEP 5.
        // READ Class c Level Annotation without the
        // annotation name
        // ===================================================
        Constructor[] clsCons = TargetAnnotation.class.getDeclaredConstructors();
        // For every Method Check if there is an annotation
        for (Constructor c : clsCons) {
            System.out.println("CLASS CONSTRUCTOR NAME: " + c.getName());
            
            // Create a Generic of Annotation Class type
            for (Annotation annCons : c.getAnnotations()) {

                // Create a Generic of Annotation Class type
                Class<? extends Annotation> type = annCons.annotationType();
                
                // Print the Annotation Type
                System.out.println("ANNOTATION NAME: " + type.getName());

                // Loop through the Annotation to get the Annotation 
                // Attributes and its values, Every Annotation Attribute is 
                // treated like a method
                for (Method method : type.getDeclaredMethods()) {
                    
                    Object value = null;
                    
                    try { // Get Annotation 
                        value = method.invoke(annCons, (Object[])null);
                    } catch (Exception e) { e.printStackTrace(); }

                    System.out.println("ANNOTATION ATTRIBUTE NAME:VALUE " + method.getName() + ":" + value);
                }
            }
        }
     }
}
// >```
